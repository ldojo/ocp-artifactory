apiVersion: v1
kind: Template
metadata:
  name: artifactory
  annotations:
    description: "A template to instantiate Jfrog Artifactory"
    tags: "artifactory,jfrog"
labels:
  artifactory: ${NAME}
parameters:
- description: ""
  name: NAME
  required: true
- description: "Random 4 char string to append to NAME"
  name: RANDOM
  generate: expression
  from: "[a-zA-Z0-9]{5}"
- description: "The image tag for Artifactory"
  name: "IMAGE"
  required: true
- description: "The server name, particularly as it matches the nginx cert server name for https setting on the docker registry in artifactory. This value will be set in nginx configuration"
  name: NGINX_SERVER_NAME
  required: false
  value: "artifactory"
- description: "The SSL port NGINX will listen on. this value will be set in nginx reverse proxy configuration"
  name: NGINX_SSL_PORT
  required: true
  value: '443'
- description: "HTTP_PROXY"
  name: HTTP_PROXY
  required: false
- description: "HTTPS_PROXY"
  name: HTTPS_PROXY
  required: false
objects:
#- apiVersion: v1
#  kind: PersistentVolumeClaim
#  metadata:
#    name: ${NAME}
#  spec:
#    accessModes:
#    - ReadWriteOnce
#    resources:
#      requests:
#        storage: 75Gi
#    storageClassName: thin
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
  spec:
    ports:
    - port: 443
      protocol: TCP
      targetPort: 443
    selector:
      artifactory: ${NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${NAME}
  data:
    artifactory-nginx.conf: "###########################################################\n##
      this configuration was generated by JFrog Artifactory ##\n###########################################################\n\n##
      add ssl entries when https has been set in config\nssl_protocols TLSv1 TLSv1.1
      TLSv1.2 TLSv1.3;\nssl_certificate      /etc/ssl/private/tls.crt;\nssl_certificate_key
      \ /etc/ssl/private/tls.key;\nssl_session_cache shared:SSL:1m;\nssl_prefer_server_ciphers
      \  on;\n## server configuration\nserver {\n    listen ${NGINX_SSL_PORT} ssl;\n    \n    \n
      \   server_name ${NGINX_SERVER_NAME};\n    if ($http_x_forwarded_proto
      = '') {\n        set $http_x_forwarded_proto  $scheme;\n    }\n    ## Application
      specific logs\n    access_log /dev/stdout;\n    error_log /dev/stdout;\n    rewrite
      ^/$ /artifactory/webapp/ redirect;\n    rewrite ^/artifactory/?(/webapp)?$ /artifactory/webapp/
      redirect;\n    rewrite ^/(v2)/(.*) /artifactory/$1/$2;\n    chunked_transfer_encoding
      on;\n    client_max_body_size 0;\n    location /artifactory/ {\n    proxy_read_timeout
      \ 2400s;\n    proxy_pass_header   Server;\n    proxy_cookie_path   ~*^/.* /;\n
      \   if ( $request_uri ~ ^/artifactory/(.*)$ ) {\n        proxy_pass          http://localhost:8081/artifactory/$1;\n
      \   }\n    proxy_pass          http://localhost:8081/artifactory/;\n    proxy_set_header
      \   X-Artifactory-Override-Base-Url $http_x_forwarded_proto://$host:$server_port/artifactory;\n
      \   proxy_set_header    X-Forwarded-Port  $server_port;\n    proxy_set_header
      \   X-Forwarded-Proto $http_x_forwarded_proto;\n    proxy_set_header    Host
      \             $http_host;\n    proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;\n
      \   }\n}"
    nginx.conf: |-
      pid /tmp/nginx.pid;
      error_log /dev/stdout info;
      http {
        scgi_temp_path /tmp/scgi;
        uwsgi_temp_path /tmp/uwsgi;
        fastcgi_temp_path /tmp/fastcgi;
        proxy_cache_path /tmp/nginx_cache keys_zone=one:10m;
        proxy_temp_path /tmp/proxy_temp;
        client_body_temp_path /tmp/client_temp;
        access_log /dev/stdout;
        include /etc/nginx/conf.d/*.conf;
      }
      events {
        worker_connections 1024;
      }
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        artifactory: ${NAME}
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          artifactory: ${NAME}
        name: ${NAME}
      spec:
        securityContext:
          fsGroup: 1030
        volumes:
#        - name: jfrog
#          persistentVolumeClaim:
#            claimName: ${NAME}
        - name: nginx-config
          configMap:
            name: ${NAME} 
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: artifactory-nginx.conf
                path: conf.d/default.conf
            defaultMode: 420
        - name: nginx-certs
          secret:
            secretName: nginx-certs
            defaultMode: 420
        containers:
        - name: nginx
          command:
            - nginx
            - '-g'
            - daemon off;
          ports:
            - name: ssl
              containerPort: ${{NGINX_SSL_PORT}}
              protocol: TCP
          imagePullPolicy: Always
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx
            - name: nginx-certs
              mountPath: /etc/ssl/private
          terminationMessagePolicy: File
          image: nginx:latest
        - image: ${IMAGE}
          imagePullPolicy: Always
          name: ${NAME}
#          volumeMounts:
#          - mountPath: "/var/opt/jfrog/artifactory/"
#            name: "jfrog"
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
#          resources:
#            requests:
#              cpu: 100m
#              memory: 4Gi
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    port:
      targetPort: 443
    tls:
      termination: passthrough
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${NAME}
      weight: 100
    wildcardPolicy: None
